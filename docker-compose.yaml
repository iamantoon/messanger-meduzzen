version: '3.8'

services:
  frontend:
    image: nginx:stable-alpine
    build: 
      context: .
      dockerfile: ./client/Dockerfile
    ports:
      - "4200:80"
    depends_on:
      - backend
    restart: always

  backend:
    container_name: backend
    build: 
      context: .
      dockerfile: ./api/Dockerfile
    ports:
      - "3000:3000"
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/messanger?schema=public
      JWT_SECRET: 7YTh6do77nBG8c3LHEq0ht0ShjZkDsZd61aB8JlCysY
      JWT_EXPIRES_IN: 604800
      CLOUDINARY_CLOUD_NAME: dh8jcy1yo
      CLOUDINARY_API_KEY: 527699695871239
      CLOUDINARY_API_SECRET: GZKNEFvf_-Xjv1TxWAvdDf1PEqI
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure

  postgres:
    container_name: postgres
    image: postgres:14.3-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - app_data:/var/lib/postgresql/data
      - ./api/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 10s
      retries: 10

volumes:
  app_data: